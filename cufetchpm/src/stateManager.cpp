/*
 * Copyright 2025 Toni500git
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
 * products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include "stateManager.hpp"

#include <filesystem>
#include <fstream>
#include <sstream>
#include <string_view>
#include <utility>

#include "fmt/base.h"
#include "fmt/os.h"
#include "libcufetch/common.hh"
#include "manifest.hpp"

using namespace ManifestSpace;

// https://github.com/hyprwm/Hyprland/blob/2d2a5bebff72c73cd27db3b9e954b8fa2a7623e8/hyprpm/src/core/DataState.cpp#L24
bool writeState(const std::string& str, const std::string& to)
{
    // create temp file in a safe temp root
    const fs::path& temp_state = (fs::temp_directory_path() / ".temp-state");
    std::ofstream   of(temp_state, std::ios::trunc);
    if (!of.good())
        return false;

    of << str;
    of.close();

    return fs::copy_file(temp_state, to, fs::copy_options::overwrite_existing);
}

// Ensures a sub-table exists for a given key. Returns a reference to the sub-table.
static toml::table& ensure_table(toml::table& parent, std::string_view key)
{
    if (toml::node* node = parent[key].node())
        if (auto* tbl = node->as_table())
            return *tbl;

    auto [it, inserted] = parent.insert(key, toml::table{});
    return *it->second.as_table();
}

// Converts a vector of strings to a toml::array
static toml::array vector_to_array(const std::vector<std::string>& vec)
{
    toml::array ret;
    for (const std::string& str : vec)
        ret.push_back(str);
    return ret;
}

StateManager::StateManager()
{
    if (!fs::exists(m_path))
    {
        auto f = fmt::output_file(m_path.string(), fmt::file::WRONLY | fmt::file::TRUNC | fmt::file::CREATE);
        f.print(R"(# AUTO-GENERATED FILE. DO NOT EDIT THIS FILE.
# YOU GONNA MESS SHIT UP. unless you know what you doing ofc
                )");
        f.close();
    }

    try
    {
        if (m_state.empty())
            m_state = toml::parse_file(m_path.string());
    }
    catch (const toml::parse_error& err)
    {
        die(_("Failed to parse state file at '{}':\n"
              "{}\n"
              "\t(error occurred at line {} column {})"),
            m_path.string(), err.description(), err.source().begin.line, err.source().begin.column);
    }
}

void StateManager::add_new_repo(const CManifest& manifest)
{
    toml::table& repositories = ensure_table(m_state, "repositories");
    toml::table& repo         = ensure_table(repositories, manifest.get_repo_name());
    repo.insert_or_assign("url", manifest.get_repo_url());

    toml::array plugins_arr;
    for (const plugin_t& plugin : manifest.get_all_plugins())
    {
        // will be inserted in alphabetical order
        toml::table entry{ { "name", plugin.name },
                           { "description", plugin.description },
                           { "authors", vector_to_array(plugin.authors) },
                           { "licenses", vector_to_array(plugin.licenses) },
                           { "prefixes", vector_to_array(plugin.prefixes) } };

        plugins_arr.push_back(std::move(entry));
    }

    repo.insert_or_assign("plugins", std::move(plugins_arr));
    std::stringstream ss;
    ss << "# AUTO-GENERATED FILE. DO NOT EDIT THIS FILE.\n";
    ss << "# YOU GONNA MESS SHIT UP. unless you know what you doing ofc\n";
    ss << m_state;

    if (!writeState(ss.str(), m_path))
        die("Failed to write plugin state of repository '{}'", manifest.get_repo_name());
}

std::vector<manifest_t> StateManager::get_all_repos()
{
    const toml::table* repositories = m_state["repositories"].as_table();
    if (!repositories)
        return {};

    std::vector<manifest_t> manifests;
    for (const auto& [repo_name, repo_node] : *repositories)
    {
        const toml::table* repo_tbl = repo_node.as_table();
        if (!repo_tbl)
            continue;

        manifest_t manifest;
        manifest.name = repo_name.str();
        manifest.url  = getStrValue(*repo_tbl, "url");

        if (const toml::array* plugins = repo_tbl->get_as<toml::array>("plugins"))
        {
            for (const auto& plugin_node : *plugins)
            {
                const toml::table* plugin_tbl = plugin_node.as_table();
                if (!plugin_tbl)
                    continue;

                plugin_t plugin;
                plugin.name        = getStrValue(*plugin_tbl, "name");
                plugin.description = getStrValue(*plugin_tbl, "description");
                plugin.output_dir  = getStrValue(*plugin_tbl, "output-dir");
                plugin.authors     = getStrArrayValue(*plugin_tbl, "authors");
                plugin.licenses    = getStrArrayValue(*plugin_tbl, "licenses");

                manifest.plugins.push_back(std::move(plugin));
            }
        }

        manifests.push_back(std::move(manifest));
    }

    return manifests;
}

void StateManager::remove_repo(const std::string& repo)
{
    toml::table& repo_tbl = *m_state["repositories"].as_table();
    if (!repo_tbl.contains(repo))
        return;

    repo_tbl.erase(repo);
    std::stringstream ss;
    ss << m_state;

    if (!writeState(ss.str(), m_path))
        die("Failed to write plugin state of repository '{}'", repo);
}
