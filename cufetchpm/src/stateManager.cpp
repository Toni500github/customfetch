#include "stateManager.hpp"

#include <filesystem>
#include <fstream>
#include <sstream>
#include <utility>

#include "fmt/os.h"
#include "libcufetch/common.hh"
#include "manifest.hpp"

// https://github.com/hyprwm/Hyprland/blob/2d2a5bebff72c73cd27db3b9e954b8fa2a7623e8/hyprpm/src/core/DataState.cpp#L24
static bool writeState(const std::string& str, const std::string& to)
{
    // create temp file in a safe temp root
    const fs::path& temp_state = (fs::temp_directory_path() / ".temp-state");
    std::ofstream   of(temp_state, std::ios::trunc);
    if (!of.good())
        return false;

    of << str;
    of.close();

    return fs::copy_file(temp_state, to, fs::copy_options::overwrite_existing);
}

// Ensures a sub-table exists for a given key. Returns a reference to the sub-table.
static toml::table& ensure_table(toml::table& parent, std::string_view key)
{
    if (toml::node* node = parent[key].node())
        if (auto* tbl = node->as_table())
            return *tbl;

    auto [it, inserted] = parent.insert(key, toml::table{});
    return *it->second.as_table();
}

static toml::array vector_to_array(const std::vector<std::string>& vec)
{
    toml::array ret;
    for (const std::string& str : vec)
        ret.push_back(str);
    return ret;
}

StateManager::StateManager()
{
    if (!fs::exists(m_path))
    {
        auto f = fmt::output_file(m_path.string(), fmt::file::WRONLY | fmt::file::TRUNC | fmt::file::CREATE);
        f.print(R"(# AUTO-GENERATED FILE. DO NOT EDIT THIS FILE.
# YOU GONNA MESS SHIT UP. unless you know what you doing ofc
                )");
        f.close();
    }

    try
    {
        if (m_state.empty())
            m_state = toml::parse_file(m_path.string());
    }
    catch (const toml::parse_error& err)
    {
        die(_("Failed to parse state file at '{}':\n"
              "{}\n"
              "\t(error occurred at line {} column {})"),
            m_path.string(), err.description(), err.source().begin.line, err.source().begin.column);
    }
}

void StateManager::add_new_repo(const CManifest& manifest)
{
    toml::table& repositories = ensure_table(m_state, "repositories");
    toml::table& repo         = ensure_table(repositories, manifest.get_repo_name());
    repo.insert_or_assign("url", manifest.get_repo_url());

    toml::array plugins_arr;
    for (const plugin_t& plugin : manifest.get_all_plugins())
    {
        // will be inserted in alphabetical order
        toml::table entry{ { "name",        plugin.name },
                           { "description", plugin.description },
                           { "output-dir",  plugin.output_dir },
                           { "authors",     vector_to_array(plugin.authors) },
                           { "licenses",    vector_to_array(plugin.licenses) },
                           { "conflicts",   vector_to_array(plugin.conflicts) },
                           { "prefixes",    vector_to_array(plugin.prefixes) } };

        plugins_arr.push_back(std::move(entry));
    }

    repo.insert_or_assign("plugins", std::move(plugins_arr));
    std::stringstream ss;
    ss << R"(# AUTO-GENERATED FILE. DO NOT EDIT THIS FILE.
             # YOU GONNA MESS SHIT UP. unless you know what you doing ofc")";
    ss << m_state;

    if (!writeState(ss.str(), m_path))
        die("Failed to write plugin state of repository '{}'", manifest.get_repo_name());
}

void StateManager::add_new_plugin(const plugin_t& manifest)
{
    toml::array authors_arr, licenses_arr;
    for (const std::string& str : manifest.authors)
        authors_arr.push_back(str);
    for (const std::string& str : manifest.licenses)
        licenses_arr.push_back(str);

    toml::table plugin_state_entry{ { "description", manifest.description },
                                    { "authors", authors_arr },
                                    { "licenses", licenses_arr },
                                    { "output-dir", manifest.output_dir } };

    // Add or replace plugin entry
    m_state.insert_or_assign(manifest.name, std::move(plugin_state_entry));

    std::stringstream ss;
    ss << m_state;

    if (!writeState(ss.str(), m_path))
        die("Failed to write plugin state of '{}'", manifest.name);
}
