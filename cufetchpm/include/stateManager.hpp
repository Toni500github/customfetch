#ifndef _STATE_MANAGER_HPP_
#define _STATE_MANAGER_HPP_

#include <filesystem>

#include "manifest.hpp"
#include "toml++/toml.hpp"
#include "util.hpp"

namespace fs = std::filesystem;

bool writeState(const std::string& str, const std::string& to);
class StateManager
{
public:
    StateManager();
    StateManager(StateManager&&)      = default;
    StateManager(const StateManager&) = default;
    ~StateManager()                   = default;

    void                    add_new_repo(const CManifest& manifest);
    std::vector<manifest_t> get_all_repos();

    template <typename T>
    void insert_or_assign_at_plugin(const std::string_view repo_name, const std::string_view plugin_name,
                                    const std::string_view key, T&& value);

    const toml::table& get_state() const
    { return m_state; }

private:
    const fs::path m_path{ getConfigDir() / "plugins" / "state.toml" };
    toml::table    m_state;
};

template <typename T>
void StateManager::insert_or_assign_at_plugin(const std::string_view repo_name, const std::string_view plugin_name,
                                              const std::string_view key, T&& value)
{
    auto* repo_plugins_arr = m_state["repositories"][repo_name]["plugins"].as_array();
    if (!repo_plugins_arr)
        die("Couldn't find an array of plugins from repository '{}'", repo_name);

    for (auto&& plugins_node : *repo_plugins_arr)
    {
        auto* plugin_tbl = plugins_node.as_table();
        if (!plugin_tbl)
            continue;
        const std::string& name = ManifestSpace::getStrValue(*plugin_tbl, "name");
        if (name != plugin_name)
            continue;

        (*plugin_tbl).insert_or_assign(key, std::forward<T>(value));
        std::stringstream ss;
        ss << "AUTO-GENERATED FILE. DO NOT EDIT THIS FILE.\n";
        ss << "# YOU GONNA MESS SHIT UP. unless you know what you doing ofc\n";
        ss << m_state;

        if (!writeState(ss.str(), m_path))
            die("Failed to write plugin state of repository '{}'", repo_name);
        break;
    }
}

#endif
