name: Makefile CI (Test customfetch NOGUI)

on:
  push:
    branches: [ "main", "test", "windows" ]
  pull_request:
    branches: [ "main", "test", "windows" ]

jobs:
  build-deb:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: create tmp directory
      run: mkdir /tmp/customfetch-0.10.0.orig

    - name: Install Packages
      run: |
        sudo apt-get update
        sudo apt-get install libwayland-dev libgtk-3-dev pkg-config libgtkmm-3.0-dev libdconf-dev libglib2.0-dev libarchive-tools
        sudo apt-get install binutils lintian debhelper devscripts debmake autoconf automake autotools-dev dh-make fakeroot xutils pbuilder -y

    - name: Clean
      run: make clean

    - name: Create deb
      run: |
        cp -r $GITHUB_WORKSPACE /tmp/customfetch-0.10.0.orig
        cd /tmp/customfetch-0.10.0.orig/customfetch
        mkdir -p Debian/Debhelper/Buildsystem/
        wget https://github.com/Debian/debhelper/raw/master/lib/Debian/Debhelper/Buildsystem/makefile.pm -O Debian/Debhelper/Buildsystem/make.pm
        sed -i "s#package Debian::Debhelper::Buildsystem::makefile#package Debian::Debhelper::Buildsystem::make#g" Debian/Debhelper/Buildsystem/make.pm
        dpkg-buildpackage -us -uc

    - name: Install test customfetch
      run: |
        cd /tmp/customfetch-0.10.0.orig
        sudo dpkg -i customfetch_0.10.0-1_amd64.deb
        cufetch --wrap-lines=0
  
  build_ubuntu-latest:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Packages
      run: sudo apt-get update && sudo apt-get install build-essential cmake neofetch tree libgtk-3-dev pkg-config libgtkmm-3.0-dev -y
    
    - name: Clean
      run: make clean

    - name: Compile
      run: sudo make install DEBUG=1 VENDOR_TEST=1 GUI_MODE=0

    - name: Test neofetch
      run: neofetch

    - name: Check system values
      run: |
        ls -l /sys/devices/virtual/dmi/id/ /sys/class/dmi/id/
        grep -Eri "virtual" /sys/class/dmi/id/ || true
        cat /sys/devices/virtual/dmi/id/board_name /sys/devices/virtual/dmi/id/board_vendor /sys/devices/virtual/dmi/id/board_version
        tree /sys/devices/system/cpu/cpu0/
        printf "/etc/os-release\n" && cat /etc/os-release
        printf "getting 0x5353 hexcode\n" && grep -nri "5353" /sys/class/ || true
       
    - name: Test customfetch
      run: ./build/debug/cufetch --wrap-lines=0

  build_Arch-AUR:
  
    runs-on: ubuntu-latest
    container:
      image: archlinux

    steps:
    - uses: actions/checkout@v4

    - name: Install the packages
      run: pacman -Syyu git sudo base-devel fakeroot pkgconf tree neofetch --noconfirm --needed
    
    - name: get /etc/sudoers
      run: |
        sed -i "s#root ALL=(ALL:ALL) ALL#root ALL=(ALL:ALL) NOPASSWD: ALL\nnobody ALL=(ALL:ALL) NOPASSWD: ALL#g" /etc/sudoers
        cat /etc/sudoers
    - name: get /etc/makepkg.conf
      run: |
        sed -i "s#purge debug lto#purge debug lto#" /etc/makepkg.conf
        cat /etc/makepkg.conf

    - name: Build and install using makepkg
      run: |
        git clone https://aur.archlinux.org/customfetch-git.git
        chown -R nobody customfetch-git
        cd customfetch-git
        sudo -u nobody makepkg -si --noconfirm

    #- name: Setup SSH session
    #  uses: mxschmitt/action-tmate@v3

    - name: Test neofetch
      run: neofetch

    - name: Test customfetch
      run: cufetch --wrap-lines=0

  build_Arch:
  
    runs-on: ubuntu-latest
    container:
      image: archlinux

    steps:
    - uses: actions/checkout@v4

    - name: Install the packages
      run: pacman -Syyu git sudo binutils gdb base-devel fakeroot pkgconf tree neofetch fastfetch --noconfirm --needed
    
    - name: get /etc/sudoers
      run: |
        sed -i "s#root ALL=(ALL:ALL) ALL#root ALL=(ALL:ALL) NOPASSWD: ALL\nnobody ALL=(ALL:ALL) NOPASSWD: ALL#g" /etc/sudoers
        cat /etc/sudoers
    - name: get /etc/makepkg.conf
      run: |
        sed -i "s#purge debug lto#purge !debug lto#" /etc/makepkg.conf
        cat /etc/makepkg.conf

    - name: Clean
      run: make clean

    - name: Compile
      run: make install DEBUG=1 VENDOR_TEST=1 GUI_MODE=0

    - name: Test neofetch
      run: neofetch

    - name: Test fastfetch
      run: fastfetch

    - name: Check system values
      run: |
        ls -l /sys/devices/virtual/dmi/id/ /sys/class/dmi/id/
        grep -Eri "virtual" /sys/class/dmi/id/ || true
        cat /sys/devices/virtual/dmi/id/board_name /sys/devices/virtual/dmi/id/board_vendor /sys/devices/virtual/dmi/id/board_version
        tree /sys/devices/system/cpu/cpu0/
        printf "/etc/os-release\n" && cat /etc/os-release

    - name: Test customfetch
      run: ./build/debug/cufetch --wrap-lines=0

  test-all-ascii-art:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Packages
      run: sudo apt-get update && sudo apt-get install build-essential tree pkg-config -y
    
    - name: Clean
      run: make clean

    - name: Compile
      run: sudo make install DEBUG=0 VENDOR_TEST=0 GUI_MODE=0

    # yes, i know too long
    # the --color arguments are just for adding a missing color to the non done ascii
    - name: Test all the ascii art logos
      run: for f in assets/ascii/*; do printf "\e[31m%s\e[0m\n" "$f" && cufetch --wrap-lines=0 -s "$f" -D assets --color "c1=!#fff111" --color "c2=!#00ff1a" --color "c3=!#faa311" --color "c4=!#343412" --color "c5=!#fff311" --color "c6=!#faa3aa" && sleep 1; done
