name: Makefile CI (Test customfetch)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-deb:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    
    - name: create tmp directory
      run: mkdir /tmp/customfetch-1.0.0.orig

    - name: Install Packages
      run: |
        sudo apt-get update && sudo apt-get upgrade -y
        sudo apt-get install libwayland-dev g++-11 libgtk-3-dev pkg-config libgtkmm-3.0-dev libdconf-dev libglib2.0-dev libarchive-tools
        sudo apt-get install binutils gettext lintian debhelper devscripts debmake autoconf automake autotools-dev dh-make fakeroot xutils pbuilder -y

    - name: Clean
      run: make distclean

    - name: Create deb
      run: |
        cp -r $GITHUB_WORKSPACE /tmp/customfetch-1.0.0.orig
        cd /tmp/customfetch-1.0.0.orig/customfetch
        mkdir -p Debian/Debhelper/Buildsystem/
        wget https://github.com/Debian/debhelper/raw/master/lib/Debian/Debhelper/Buildsystem/makefile.pm -O Debian/Debhelper/Buildsystem/make.pm
        sed -i "s#package Debian::Debhelper::Buildsystem::makefile#package Debian::Debhelper::Buildsystem::make#g" Debian/Debhelper/Buildsystem/make.pm
        sed -i "s#DEBUG=0#DEBUG=0 CXX=x86_64-linux-gnu-g++-11#g" debian/rules
        dpkg-buildpackage -us -uc

    - name: Install test customfetch
      run: |
        cd /tmp/customfetch-1.0.0.orig
        sudo dpkg -i customfetch_1.0.0-1_amd64.deb
        customfetch --wrap-lines

    - name: Upload to github artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: customfetch_amd64
        path: /tmp/customfetch-1.0.0.orig/customfetch_1.0.0-1_amd64.deb

  build-deb-gui:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    
    - name: create tmp directory
      run: mkdir /tmp/customfetch-1.0.0.orig

    - name: Install Packages
      run: |
        sudo apt-get update && sudo apt-get upgrade -y
        sudo apt-get install libwayland-dev g++-11 libgtk-3-dev pkg-config libgtkmm-3.0-dev libdconf-dev libglib2.0-dev libarchive-tools
        sudo apt-get install binutils lintian debhelper gettext devscripts debmake autoconf automake autotools-dev dh-make fakeroot xutils pbuilder -y

    - name: Clean
      run: make distclean

    - name: Create deb
      run: |
        cp -r $GITHUB_WORKSPACE /tmp/customfetch-1.0.0.orig
        cd /tmp/customfetch-1.0.0.orig/customfetch
        mkdir -p Debian/Debhelper/Buildsystem/
        wget https://github.com/Debian/debhelper/raw/master/lib/Debian/Debhelper/Buildsystem/makefile.pm -O Debian/Debhelper/Buildsystem/make.pm
        sed -i "s#package Debian::Debhelper::Buildsystem::makefile#package Debian::Debhelper::Buildsystem::make#g" Debian/Debhelper/Buildsystem/make.pm
        sed -i "s#GUI_APP=0#GUI_APP=1 CXX=x86_64-linux-gnu-g++-11#g" debian/rules
        sed -i "/^Build-Depends:/a Depends: libgtkmm-3.0-1v5,libgtk-3-0" debian/control
        dpkg-buildpackage -us -uc

    - name: Upload to github artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: customfetch-gui_amd64
        path: /tmp/customfetch-1.0.0.orig/customfetch_1.0.0-1_amd64.deb
  
  build_ubuntu-22_04:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install Packages
      run: |
        sudo apt-get update && sudo apt upgrade -y
        sudo apt-get install neofetch tree build-essential g++-11 libwayland-dev gettext libgtk-3-dev pkg-config libdconf-dev libglib2.0-dev libgtkmm-3.0-dev libarchive-tools -y
    
    - name: Clean
      run: make distclean

    - name: Compile and install
      run: make DEBUG=1 GUI_APP=0 CXX=x86_64-linux-gnu-g++-11 && sudo make install

    - name: Test neofetch
      run: neofetch

    - name: Check system values
      run: |
        ls -l /sys/devices/virtual/dmi/id/ /sys/class/dmi/id/
        grep -Eri "virtual" /sys/class/dmi/id/ || true
        cat /sys/devices/virtual/dmi/id/board_name /sys/devices/virtual/dmi/id/board_vendor /sys/devices/virtual/dmi/id/board_version
        tree /sys/devices/system/cpu/cpu0/
        printf "/etc/os-release\n" && cat /etc/os-release
        printf "getting 0x5353 hexcode\n" && grep -nri "5353" /sys/class/ || true
       
    - name: Test customfetch
      run: ./build/debug/customfetch --wrap-lines

    - name: Upload to github artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: customfetch
        path: ./build/debug/customfetch

  build_ubuntu-22_04-GUI:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install Packages
      run: |
        sudo apt-get update && sudo apt upgrade -y
        sudo apt-get install neofetch tree build-essential g++-11 libwayland-dev gettext libgtk-3-dev pkg-config libdconf-dev libglib2.0-dev libgtkmm-3.0-dev -y

    - name: Clean
      run: make distclean

    - name: Compile and install
      run: make DEBUG=1 GUI_APP=1 CXX=x86_64-linux-gnu-g++-11 && sudo make install GUI_APP=1

    - name: Test neofetch
      run: neofetch
       
    - name: Test customfetch
      run: ./build/debug/customfetch-gui --version

    - name: Upload to github artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: customfetch-gui
        path: ./build/debug/customfetch-gui

  build_Arch-AUR:
    runs-on: ubuntu-latest
    container:
      image: archlinux

    steps:
    - uses: actions/checkout@v4

    - name: Install the packages
      run: pacman -Syyu git sudo base-devel fakeroot pkgconf tree neofetch --noconfirm --needed

    - name: Create a dedicated build user
      run: |
        useradd -m -s /bin/bash builduser
        echo "builduser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    
    - name: get /etc/makepkg.conf
      run: |
        sed -i "s#purge debug lto#purge debug lto#" /etc/makepkg.conf
        cat /etc/makepkg.conf

    - name: Build and install using makepkg
      run: |
        git clone https://aur.archlinux.org/customfetch-common-git.git
        chown -R builduser customfetch-common-git
        cd customfetch-common-git
        sudo -u builduser makepkg -si --noconfirm
        cd ..
        git clone https://aur.archlinux.org/customfetch-git.git
        chown -R builduser customfetch-git
        cd customfetch-git
        sudo -u builduser makepkg -si --noconfirm

    #- name: Setup SSH session
    #  uses: mxschmitt/action-tmate@v3

    - name: Test neofetch
      run: neofetch

    - name: Test customfetch
      run: customfetch --wrap-lines

  build_Arch:
    runs-on: ubuntu-latest
    container:
      image: archlinux

    steps:
    - uses: actions/checkout@v4

    - name: Install the packages
      run: pacman -Syyu git sudo binutils gdb base-devel fakeroot pkgconf tree neofetch fastfetch --noconfirm --needed
    
    - name: get /etc/sudoers
      run: |
        sed -i "s#root ALL=(ALL:ALL) ALL#root ALL=(ALL:ALL) NOPASSWD: ALL\nnobody ALL=(ALL:ALL) NOPASSWD: ALL#g" /etc/sudoers
        cat /etc/sudoers
    - name: get /etc/makepkg.conf
      run: |
        sed -i "s#purge debug lto#purge !debug lto#" /etc/makepkg.conf
        cat /etc/makepkg.conf

    - name: Clean
      run: make distclean

    - name: Compile and install
      run: make install DEBUG=1 VENDOR_TEST=1 GUI_APP=0

    - name: Test neofetch
      run: neofetch

    - name: Test fastfetch
      run: fastfetch

    - name: Check system values
      run: |
        ls -l /sys/devices/virtual/dmi/id/ /sys/class/dmi/id/
        grep -Eri "virtual" /sys/class/dmi/id/ || true
        cat /sys/devices/virtual/dmi/id/board_name /sys/devices/virtual/dmi/id/board_vendor /sys/devices/virtual/dmi/id/board_version
        tree /sys/devices/system/cpu/cpu0/
        printf "/etc/os-release\n" && cat /etc/os-release

    - name: Test customfetch
      run: ./build/debug/customfetch --wrap-lines

  build-android-app:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew
      
      - name: Build with Gradle
        run: make distclean && make android_app
      
      - name: Check files
        run: tree android/app/build/outputs/apk

      - name: Upload to github artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: customfetch-android-app
          path: android/app/build/outputs/apk/debug/app-debug.apk

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install the packages
        run: HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install --overwrite fastfetch neofetch tree llvm@19

      - name: uname -a && clang++ --version
        run: uname -a && echo "\n" && $(brew --prefix llvm@19)/bin/clang++ --version
        
      - name: Clean
        run: make distclean

      - name: Compile
        run: make DEBUG=1 GUI_APP=0 CXX=$(brew --prefix llvm@19)/bin/clang++

      - name: Test neofetch
        run: neofetch

      - name: Test fastfetch
        run: fastfetch

      - name: Test customfetch
        run: ./build/debug/customfetch -D assets

      - name: Upload to github artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: customfetch-macos
          path: ./build/debug/customfetch

  test-all-ascii-art:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Packages
      run: sudo apt-get update && sudo apt-get install build-essential gettext tree pkg-config -y
    
    - name: Clean
      run: make distclean

    - name: Compile and install
      run: sudo make install DEBUG=0 VENDOR_TEST=0 GUI_APP=0

    - name: Test all the ascii art logos
      run: for f in assets/ascii/*; do printf "\e[31m%s\e[0m\n" "$f" && customfetch --wrap-lines --source "$f" -D assets && sleep 1; done
